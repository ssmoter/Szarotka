@implements IDisposable

@using Inventory.Pages.RangeDay
@using DataBase.Helper
@using MudBlazor

<MudThemeProvider @bind-IsDarkMode="@DataBase.Helper.MudBlazorTheme.IsDarkMode" Theme="@DataBase.Helper.MudBlazorTheme.Theme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />


<div class="">
    <div class="container-fluid">

        @if (RangeDayMs is not null)
        {
            if (RangeDayMs.Count > 0)
            {
                var order = RangeDayMs.OrderBy(x => x.Day.SelectedDateTicks);
                var first = order.FirstOrDefault().Day;
                var last = order.LastOrDefault().Day;


                <MudExpansionPanels Dense Gutters Class="mt-6">
                    @if (Sum.Count > 0)
                    {
                        var title = $"Suma z całego zakresu od {first.SelectedDateString}  do {last.SelectedDateString}  ({(last.SelectedDate - first.SelectedDate).Days} Dni)";
                        <MudExpansionPanel Text="@title">

                            <SmallRangeTable Products="ProductsAll" RangeDayMs="Sum" TimeIsVisible="false"
                                             Title="@title" />
                        </MudExpansionPanel>
                    }
                    @if (SumDayOfWeek.Count > 0)
                    {
                        var title = $"Sumy poszczególnych dni z zakresu od  {first.SelectedDateString}  do {last.SelectedDateString}  ({(last.SelectedDate - first.SelectedDate).Days} Dni)";
                        <MudExpansionPanel Text="@title">

                            <SmallRangeTable Products="ProductsAll" RangeDayMs="SumDayOfWeek" TimeIsVisible="false" DayOfWeekIsVisible="true"
                                             Title="@title" />
                        </MudExpansionPanel>
                    }
                    @if (SumPerOfWeek.Count > 0)
                    {
                        var title = $"Sumy poszczególnych tygodni z zakresu od  {first.SelectedDateString}  do {last.SelectedDateString} ({(last.SelectedDate - first.SelectedDate).Days} Dni)";
                        <MudExpansionPanel Text="@title">

                            <SmallRangeTable Products="ProductsAll" RangeDayMs="SumPerOfWeek" TimeIsVisible="false" DayOfWeekIsVisible="true"
                                             Title="@title" />
                        </MudExpansionPanel>
                    }
                    @if (SumPerOfMonth.Count > 0)
                    {
                        var title = $"Sumy poszczególnych miesięcy z zakresu od  {first.SelectedDateString}  do {last.SelectedDateString} ({(last.SelectedDate - first.SelectedDate).Days} Dni)";
                        <MudExpansionPanel Text="@title">

                            <SmallRangeTable Products="ProductsAll" RangeDayMs="SumPerOfMonth" TimeIsVisible="false" DayOfWeekIsVisible="true"
                                             Title="@title" />
                        </MudExpansionPanel>
                    }
                </MudExpansionPanels>

                <MudExpansionPanels Dense Gutters Class="mt-6">
                    @if (AveragesDayOfWeek.Count > 0)
                    {
                        var title = $"Średnie poszczególnych dni z zakresu od  {first.SelectedDateString}  do {last.SelectedDateString} ({(last.SelectedDate - first.SelectedDate).Days} Dni)";
                        <MudExpansionPanel Text="@title">

                            <SmallRangeTable Products="ProductsAll" RangeDayMs="AveragesDayOfWeek" TimeIsVisible="false" DayOfWeekIsVisible="true"
                                             Title="@title" />
                        </MudExpansionPanel>
                    }
                    @if (AveragesPerOfWeek.Count > 0)
                    {
                        var title = $"Średnie poszczególnych tygodni z zakresu od  {first.SelectedDateString}  do {last.SelectedDateString} ({(last.SelectedDate - first.SelectedDate).Days} Dni)";
                        <MudExpansionPanel Text="@title">

                            <SmallRangeTable Products="ProductsAll" RangeDayMs="AveragesPerOfWeek" TimeIsVisible="false" DayOfWeekIsVisible="true"
                                             Title="@title" />
                        </MudExpansionPanel>
                    }
                    @if (AveragesPerOfMonth.Count > 0)
                    {
                        var title = $"Średnie poszczególnych miesięcy z zakresu od  {first.SelectedDateString}  do {last.SelectedDateString} ({(last.SelectedDate - first.SelectedDate).Days} Dni)";
                        <MudExpansionPanel Text="@title">

                            <SmallRangeTable Products="ProductsAll" RangeDayMs="AveragesPerOfMonth" TimeIsVisible="false" DayOfWeekIsVisible="true"
                                             Title="@title" />
                        </MudExpansionPanel>
                    }
                </MudExpansionPanels>

                <MudExpansionPanels MultiExpansion="true" Dense Gutters Class="mt-6">
                    @for (int i = 0; i < UniqueDriver.Count; i++)
                    {
                        var title = $"Dane Kierowcy {RangeDayMs[i].Driver.Name} ({(last.SelectedDate - first.SelectedDate).Days} dni)";
                        <MudExpansionPanel Text="@title">

                            <SmallRangeTable Products="ProductsAll" RangeDayMs="RangeDayMs.Where(x => x.Driver.Id == UniqueDriver[0].Id).ToArray()" TimeIsVisible="true"
                                             Title="@title" />
                        </MudExpansionPanel>

                    }
                </MudExpansionPanels>
            }
        }

    </div>
</div>







@code {
    [Parameter]
    public IList<RangeDayM> RangeDayMs { get; set; }
    public IList<RangeDayM> Sum { get; set; }

    public IList<RangeDayM> SumDayOfWeek { get; set; }
    public IList<RangeDayM> AveragesDayOfWeek { get; set; }

    public IList<RangeDayM> SumPerOfWeek { get; set; }
    public IList<RangeDayM> AveragesPerOfWeek { get; set; }


    public IList<RangeDayM> SumPerOfMonth { get; set; }
    public IList<RangeDayM> AveragesPerOfMonth { get; set; }


    public IList<DataBase.Model.EntitiesInventory.Product> ProductsAll { get; set; }

    IList<DataBase.Model.EntitiesInventory.Driver> UniqueDriver = [];

    private static event Action<IList<RangeDayM>> SetRangeDayMs;
    private void setRange(IList<RangeDayM> value)
    {
        RangeDayMs = value;
        Calculate(value);
        StateHasChanged();
    }
    public static void OnSetRangeDayMs(IList<RangeDayM> value)
    {
        SetRangeDayMs?.Invoke(value);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        SetRangeDayMs += setRange;
    }

    public void Dispose()
    {
        SetRangeDayMs -= setRange;
        GC.SuppressFinalize(this);
    }

    public void Calculate(IList<RangeDayM> value)
    {
        if (value is not null)
        {
            Helper.RangeCalculations.GetUniqueDriver(value);
            UniqueDriver = Helper.RangeCalculations.UniqueDriver;

            Sum = Helper.RangeCalculations.SumTotalOfRangeCalculateAverages(value);

            SumDayOfWeek = Helper.RangeCalculations.SumDayOfWeek(value);
            AveragesDayOfWeek = Helper.RangeCalculations.AveragesDayOfWeek(value);

            SumPerOfWeek = Helper.RangeCalculations.SumPerOfWeek(value);
            AveragesPerOfWeek = Helper.RangeCalculations.AveragesPerOfWeek(value);

            SumPerOfMonth = Helper.RangeCalculations.SumPerOfMonth(value);
            AveragesPerOfMonth = Helper.RangeCalculations.AveragesPerOfMonth(value);

            if (Sum.Count > 0)
            {
                ProductsAll = Sum.MaxBy(x => x.Day.Products.Count).Day.Products.ToArray();
            }

        }

    }
}

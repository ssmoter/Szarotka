@* @implements IDisposable *@

@using Inventory.Pages.RangeDay
@using DataBase.Helper
@using MudBlazor


<MudThemeProvider @bind-IsDarkMode="@DataBase.Helper.MudBlazorTheme.IsDarkMode" Theme="@DataBase.Helper.MudBlazorTheme.Theme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@if (RangeDayMs is not null)
{
    @if (RangeDayMs.Count > 0)
    {
        var order = RangeDayMs.OrderBy(x => x.Day.SelectedDateTicks);
        var first = order.FirstOrDefault().Day;
        var last = order.LastOrDefault().Day;
        var numberOfDay = RangeDayMs.Count;

        <MudExpansionPanels Dense Gutters>

            <MudExpansionPanel Text="Tabele Sum">
                <MudExpansionPanels Dense Gutters Class="">
                    @if (Sum.Count > 0)
                    {
                        var title = $"Suma z całego zakresu od {first.SelectedDateString}  do {last.SelectedDateString}  ({numberOfDay} Dni)";
                        <MudExpansionPanel Text="@title">

                            <SmallRangeTable Products="ProductsAll" RangeDayMs="Sum" TimeIsVisible="false"
                                             Title="@title" />
                        </MudExpansionPanel>
                    }
                    @if (SumDayOfWeek.Count > 0)
                    {
                        var title = $"Sumy poszczególnych dni z zakresu od  {first.SelectedDateString}  do {last.SelectedDateString}  ({numberOfDay} Dni)";
                        <MudExpansionPanel Text="@title">

                            <SmallRangeTable Products="ProductsAll" RangeDayMs="SumDayOfWeek" TimeIsVisible="false" DayOfWeekIsVisible="true"
                                             Title="@title" />
                        </MudExpansionPanel>
                    }
                    @if (SumPerOfWeek.Count > 0)
                    {
                        var title = $"Sumy poszczególnych tygodni z zakresu od  {first.SelectedDateString}  do {last.SelectedDateString} ({numberOfDay} Dni)";
                        <MudExpansionPanel Text="@title">

                            <SmallRangeTable Products="ProductsAll" RangeDayMs="SumPerOfWeek" TimeIsVisible="false" DayOfWeekIsVisible="true"
                                             Title="@title" />
                        </MudExpansionPanel>
                    }
                    @if (SumPerOfMonth.Count > 0)
                    {
                        var title = $"Sumy poszczególnych miesięcy z zakresu od  {first.SelectedDateString}  do {last.SelectedDateString} ({numberOfDay} Dni)";
                        <MudExpansionPanel Text="@title">

                            <SmallRangeTable Products="ProductsAll" RangeDayMs="SumPerOfMonth" TimeIsVisible="false" DayOfWeekIsVisible="true"
                                             Title="@title" />
                        </MudExpansionPanel>
                    }
                </MudExpansionPanels>
            </MudExpansionPanel>

            <MudExpansionPanel Text="Tabele średnich">
                <MudExpansionPanels Dense Gutters Class="mt-6">
                    @if (AveragesDayOfWeek.Count > 0)
                    {
                        var title = $"Średnie poszczególnych dni z zakresu od  {first.SelectedDateString}  do {last.SelectedDateString} ({numberOfDay} Dni)";
                        <MudExpansionPanel Text="@title">

                            <SmallRangeTable Products="ProductsAll" RangeDayMs="AveragesDayOfWeek" TimeIsVisible="false" DayOfWeekIsVisible="true"
                                             Title="@title" />
                        </MudExpansionPanel>
                    }
                    @if (AveragesPerOfWeek.Count > 0)
                    {
                        var title = $"Średnie poszczególnych tygodni z zakresu od  {first.SelectedDateString}  do {last.SelectedDateString} ({numberOfDay} Dni)";
                        <MudExpansionPanel Text="@title">

                            <SmallRangeTable Products="ProductsAll" RangeDayMs="AveragesPerOfWeek" TimeIsVisible="false" DayOfWeekIsVisible="true"
                                             Title="@title" />
                        </MudExpansionPanel>
                    }
                    @if (AveragesPerOfMonth.Count > 0)
                    {
                        var title = $"Średnie poszczególnych miesięcy z zakresu od  {first.SelectedDateString}  do {last.SelectedDateString} ({numberOfDay} Dni)";
                        <MudExpansionPanel Text="@title">

                            <SmallRangeTable Products="ProductsAll" RangeDayMs="AveragesPerOfMonth" TimeIsVisible="false" DayOfWeekIsVisible="true"
                                             Title="@title" />
                        </MudExpansionPanel>
                    }
                </MudExpansionPanels>
            </MudExpansionPanel>

        </MudExpansionPanels>

        <MudExpansionPanels MultiExpansion="true" Dense Gutters Class="mt-6">
            @for (int i = 0; i < UniqueDriver.Count; i++)
            {
                var unique = RangeDayMs.Where(x => x.Driver.Id == UniqueDriver[0].Id).ToArray();
                var title = $"Dane Kierowcy {RangeDayMs[i].Driver.Name} ({unique.Length} dni)";
                <MudExpansionPanel Text="@title">

                    <SmallRangeTable Products="ProductsAll" RangeDayMs="unique" TimeIsVisible="true"
                                     Title="@title" />
                </MudExpansionPanel>

            }
        </MudExpansionPanels>
    }
}









@code {
    public IList<RangeDayM> RangeDayMs { get; set; } = [];

    public IList<RangeDayM> Sum { get; set; } = [];

    public IList<RangeDayM> SumDayOfWeek { get; set; } = [];
    public IList<RangeDayM> AveragesDayOfWeek { get; set; } = [];

    public IList<RangeDayM> SumPerOfWeek { get; set; } = [];
    public IList<RangeDayM> AveragesPerOfWeek { get; set; } = [];


    public IList<RangeDayM> SumPerOfMonth { get; set; } = [];
    public IList<RangeDayM> AveragesPerOfMonth { get; set; } = [];


    public IList<DataBase.Model.EntitiesInventory.Product> ProductsAll { get; set; }

    IList<DataBase.Model.EntitiesInventory.Driver> UniqueDriver = [];

    private static event Action<
        IList<RangeDayM>
    , IList<RangeDayM>
    , IList<RangeDayM>
    , IList<RangeDayM>
    , IList<RangeDayM>
    , IList<RangeDayM>
    , IList<RangeDayM>
    , IList<RangeDayM>
    , IList<DataBase.Model.EntitiesInventory.Product>
    , IList<DataBase.Model.EntitiesInventory.Driver>
    > SetRangeDayMs;
    private void setRange(
        IList<RangeDayM> rangeDayMs
    , IList<RangeDayM> sum
    , IList<RangeDayM> sumDayOfWeek
    , IList<RangeDayM> averagesDayOfWeek
    , IList<RangeDayM> sumPerOfWeek
    , IList<RangeDayM> averagesPerOfWeek
    , IList<RangeDayM> sumPerOfMonth
    , IList<RangeDayM> averagesPerOfMonth
    , IList<DataBase.Model.EntitiesInventory.Product> productsAll
    , IList<DataBase.Model.EntitiesInventory.Driver> uniqueDriver
    )
    {
        RangeDayMs = rangeDayMs;
        Sum = sum;
        SumDayOfWeek = sumDayOfWeek;
        AveragesDayOfWeek = averagesDayOfWeek;
        SumPerOfWeek = sumPerOfWeek;
        AveragesPerOfWeek = averagesPerOfWeek;
        SumPerOfMonth = sumPerOfMonth;
        AveragesPerOfMonth = averagesPerOfMonth;
        ProductsAll = productsAll;
        UniqueDriver = uniqueDriver;
        StateHasChanged();
    }
    public static void OnSetRangeDayMs(IList<RangeDayM> rangeDayMs
    , IList<RangeDayM> sum
    , IList<RangeDayM> sumDayOfWeek
    , IList<RangeDayM> averagesDayOfWeek
    , IList<RangeDayM> sumPerOfWeek
    , IList<RangeDayM> averagesPerOfWeek
    , IList<RangeDayM> sumPerOfMonth
    , IList<RangeDayM> averagesPerOfMonth
    , IList<DataBase.Model.EntitiesInventory.Product> productsAll
    , IList<DataBase.Model.EntitiesInventory.Driver> uniqueDriver)
    {
        SetRangeDayMs?.Invoke(rangeDayMs, sum, sumDayOfWeek, averagesDayOfWeek, sumPerOfWeek, averagesPerOfWeek, sumPerOfMonth, averagesPerOfMonth, productsAll, uniqueDriver);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
    public RangeTable()
    {
        SetRangeDayMs += setRange;
    }

    public void Dispose()
    {
        // SetRangeDayMs -= setRange;
        // GC.SuppressFinalize(this);
    }

    public void Calculate(IList<RangeDayM> value)
    {
        if (value is not null)
        {
            Helper.RangeCalculations.GetUniqueDriver(value);
            UniqueDriver = Helper.RangeCalculations.UniqueDriver;

            Sum = Helper.RangeCalculations.SumTotalOfRangeCalculateAverages(value);
            if (Sum.Count > 0)
            {
                ProductsAll = Sum.MaxBy(x => x.Day.Products.Count).Day.Products.ToArray();
            }

            SumDayOfWeek = Helper.RangeCalculations.SumDayOfWeek(value);
            AveragesDayOfWeek = Helper.RangeCalculations.AveragesDayOfWeek(value);

            SumPerOfWeek = Helper.RangeCalculations.SumPerOfWeek(value);
            AveragesPerOfWeek = Helper.RangeCalculations.AveragesPerOfWeek(value);


            SumPerOfMonth = Helper.RangeCalculations.SumPerOfMonth(value);
            AveragesPerOfMonth = Helper.RangeCalculations.AveragesPerOfMonth(value);

        }
    }
}

@using DataBase.Helper;
@using DataBase.Model.EntitiesInventory;
@using MudBlazor


<MudDataGrid T="RangeDayMWithNumber" Hover Dense Items="@rangeDayMs" Virtualize="true" FixedHeader="true" RowsPerPage="@RowsPerPage" Height="@Height">
    <Columns>

        <PropertyColumn Property="x=>x.Number" Title="Lp."></PropertyColumn>
        <PropertyColumn Property="x=>x.Driver.Name" Title="Kierowca"></PropertyColumn>
        @if (TimeIsVisible)
        {
            <PropertyColumn Property="x=>x.Day.SelectedDate" Title="Data jazdy"></PropertyColumn>
            <PropertyColumn Property="x=>x.Day.SelectedDate.DayOfWeek.TranslateSelectedDay()" Title="Dzień tygodnia"></PropertyColumn>
        }
        @if (DayOfWeekIsVisible)
        {
            <PropertyColumn Property="x=>x.Day.SelectedDateString" Title="Dzień tygodnia"></PropertyColumn>
        }
        <PropertyColumn Property="x=>x.Day.TotalPriceProductsDecimal" Title="Utarg produkty"></PropertyColumn>
        <PropertyColumn Property="x=>x.Day.TotalPriceCakeDecimal" Title="Utarg ciasto"></PropertyColumn>
        <PropertyColumn Property="x=>x.Day.TotalPriceDecimal" Title="Utarg suma"></PropertyColumn>
        <PropertyColumn Property="x=>x.Day.TotalPriceCorrectDecimal" Title="korekta"></PropertyColumn>
        <PropertyColumn Property="x=>x.Day.TotalPriceAfterCorrectDecimal" Title="Utarg po korekcie"></PropertyColumn>
        <PropertyColumn Property="x=>x.Day.TotalPriceMoneyDecimal" Title="Zapłacono"></PropertyColumn>
        <PropertyColumn Property="x=>x.Day.TotalPriceDifferenceDecimal" Title="Różnica"></PropertyColumn>

        <PropertyColumn Property="x=>x.Day.Products" Title="">

            <CellTemplate>
                <div class="w-100 text-start">

                    <MudSwitch @bind-Value="context.Item.ShowDetails" Label="Wyświetl szczegóły" Class="d-block"></MudSwitch>

                    @{
                        var products = context.Item.Day.Products;
                    }

                    <MudTable Items="@context.Item.Table" Context="productsItems" Class="d-block">

                        <HeaderContent>

                            <MudTh>*</MudTh>

                            @foreach (var item in Products)
                            {
                                <MudTh>@item.Name.Name</MudTh>
                            }

                        </HeaderContent>

                        <ChildRowContent>
                            <MudTd>
                                <MudTr Style="d-flex justify-start">

                                </MudTr>
                                <MudTr>Ilość</MudTr>
                                <MudTr>Edycja</MudTr>
                                <MudTr>Zwrot</MudTr>
                                <MudTr>Sprzedane</MudTr>
                                <MudTr>Utarg zł</MudTr>

                            </MudTd>
                            @for (int j = 0; j < Products.Count; j++)
                            {
                                var find = products.FirstOrDefault(x => x.Name.Id == Products[j].Name.Id);
                                int index = -1;

                                @if (find is not null)
                                {
                                    index = products.IndexOf(find);
                                }
                                @if (index == -1)
                                {
                                    <MudTd>0</MudTd>
                                    continue;
                                }
                                @if (Products[j].Name.Id != products[index].Name.Id)
                                {
                                    <MudTd>0</MudTd>
                                    continue;
                                }

                                <MudTd>

                                    <MudTr media="screen and (min-width: 600px)">
                                        @*  @products[index].Name.Name *@
                                    </MudTr>


                                    <MudTr DataLabel="@products[index].Name.Name">@products[index].Number</MudTr>
                                    <MudTr DataLabel="@products[index].Name.Name">@products[index].NumberEdit</MudTr>
                                    <MudTr DataLabel="@products[index].Name.Name">@products[index].NumberReturn</MudTr>
                                    <MudTr DataLabel="@products[index].Name.Name">@(products[index].Number + products[index].NumberEdit - products[index].NumberReturn)</MudTr>
                                    <MudTr DataLabel="@products[index].Name.Name">@(products[index].PriceTotalAfterCorrectDecimal)</MudTr>
                                </MudTd>

                            }


                        </ChildRowContent>


                    </MudTable>

                </div>

            </CellTemplate>
        </PropertyColumn>



    </Columns>



    <PagerContent>
        <MudButton OnClick="@ShowDetailsAll">Wyświetl szczegóły</MudButton>
        <MudDataGridPager T="RangeDayMWithNumber" PageSizeOptions=@(new int[] {6, 31,60,183,1000}) />
    </PagerContent>

</MudDataGrid>



@code {

    private IList<RangeDayMWithNumber> rangeDayMs;
    [Parameter]
    public IList<RangeDayM> RangeDayMs { get; set; }
    [Parameter]
    public bool TimeIsVisible { get; set; }
    [Parameter]
    public bool DayOfWeekIsVisible { get; set; }
    [Parameter]
    public string Title { get; set; } = "";
    [Parameter]
    public IList<DataBase.Model.EntitiesInventory.Product> Products { get; set; }

    int RowsPerPage = 31;
    string Height => SetHeight();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        rangeDayMs = new RangeDayMWithNumber[RangeDayMs.Count];

        for (int i = 0; i < RangeDayMs.Count; i++)
        {
            rangeDayMs[i] = new(RangeDayMs[i]);
            rangeDayMs[i].Number = i + 1;
        }

    }


    private string SetHeight()
    {
        var height = (DeviceDisplay.Current.MainDisplayInfo.Height / DeviceDisplay.Current.MainDisplayInfo.Density) * 0.5;
        if (rangeDayMs.Count <= RowsPerPage)
        {
            RowsPerPage = rangeDayMs.Count;
            return "";
        }
        return height.ToString() + "px";
    }
    private bool showDetailsAll;
    private void ShowDetailsAll()
    {
        showDetailsAll = !showDetailsAll;
        for (int i = 0; i < rangeDayMs.Count; i++)
        {
            rangeDayMs[i].ShowDetails = showDetailsAll;
        }
    }

    public class RangeDayMWithNumber : RangeDayM
    {
        public RangeDayMWithNumber(RangeDayM rangeDayM)
        {
            Day = rangeDayM.Day;
            Driver = rangeDayM.Driver;
        }
        public int[] Table { get; set; }
        public int Number { get; set; }
        bool showDetails;
        public bool ShowDetails
        {
            get => showDetails;
            set
            {
                showDetails = value;
                if (showDetails)
                {
                    Table = [1];
                }
                else
                {
                    Table = null;
                }
            }
        }
    }


}

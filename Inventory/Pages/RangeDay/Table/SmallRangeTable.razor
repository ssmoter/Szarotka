@using Shared.Helper;
@using DataBase.Model.EntitiesInventory;
@using MudBlazor


<MudDataGrid T="RangeDayMWithNumber" Hover Dense Items="@rangeDayMs" Virtualize="true" FixedHeader="true" RowsPerPage="@RowsPerPage" Height="@Height">

    <Columns>
        <HierarchyColumn InitiallyExpandedFunc="@(x=>x.ShowDetails=!x.ShowDetails)"></HierarchyColumn>
        <PropertyColumn Property="x=>x.Number" Title="Lp." StickyLeft="true"></PropertyColumn>
        <PropertyColumn Property="x=>x.Driver.Name" Title="Kierowca"></PropertyColumn>
        @if (TimeIsVisible)
        {
            <PropertyColumn Property="x=>x.Day.SelectedDate" Title="Data jazdy"></PropertyColumn>
            <PropertyColumn Property="x=>x.Day.SelectedDate.DayOfWeek.TranslateSelectedDay()" Title="Dzień tygodnia"></PropertyColumn>
        }
        @if (DayOfWeekIsVisible)
        {
            <PropertyColumn Property="x=>x.Day.SelectedDateString" Title="Dzień tygodnia"></PropertyColumn>
        }
        <PropertyColumn Property="x=>x.Day.TotalPriceProductsDecimal" Title="Utarg produkty"></PropertyColumn>
        <PropertyColumn Property="x=>x.Day.TotalPriceCakeDecimal" Title="Utarg ciasto"></PropertyColumn>
        <PropertyColumn Property="x=>x.Day.TotalPriceDecimal" Title="Utarg suma"></PropertyColumn>
        <PropertyColumn Property="x=>x.Day.TotalPriceCorrectDecimal" Title="korekta"></PropertyColumn>
        <PropertyColumn Property="x=>x.Day.TotalPriceAfterCorrectDecimal" Title="Utarg po korekcie"></PropertyColumn>
        <PropertyColumn Property="x=>x.Day.TotalPriceMoneyDecimal" Title="Zapłacono"></PropertyColumn>
        <PropertyColumn Property="x=>x.Day.TotalPriceDifferenceDecimal" Title="Różnica"></PropertyColumn>
    </Columns>

    <ChildRowContent>
        @{
            var products = context.Item.Day.Products;
            var height = context.Item.Day.Products.Count > 0 ? "300px" : "";
        }
        <MudDataGrid Class="w-100" T="Product" Hover Dense Items="@products" FixedHeader="true" Height="@height">
            <Columns>
                <PropertyColumn Property="x=>x.Name.Name" Title="Nazwa" StickyLeft="true"></PropertyColumn>
                <PropertyColumn Property="x=>x.Number + x.NumberEdit" Title="Ilość"></PropertyColumn>
                <PropertyColumn Property="x=>x.NumberReturn" Title="Zwrot"></PropertyColumn>
                <PropertyColumn Property="x=>x.Number + x.NumberEdit - x.NumberReturn" Title="Sprzedane"></PropertyColumn>
                <PropertyColumn Property="x=>x.PriceTotalAfterCorrectDecimal" Title="Utarg"></PropertyColumn>
            </Columns>
        </MudDataGrid>
    </ChildRowContent>


    <PagerContent>
        <MudDataGridPager T="RangeDayMWithNumber" PageSizeOptions=@(new int[] {6, 31,60,183,1000}) />
    </PagerContent>

</MudDataGrid>



@code {

    private IList<RangeDayMWithNumber> rangeDayMs;
    [Parameter]
    public IList<RangeDayM> RangeDayMs { get; set; }
    [Parameter]
    public bool TimeIsVisible { get; set; }
    [Parameter]
    public bool DayOfWeekIsVisible { get; set; }
    [Parameter]
    public string Title { get; set; } = "";
    [Parameter]
    public IList<Product> Products { get; set; }

    int RowsPerPage = 31;
    string Height => SetHeight();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        rangeDayMs = new RangeDayMWithNumber[RangeDayMs.Count];

        for (int i = 0; i < RangeDayMs.Count; i++)
        {
            rangeDayMs[i] = new(RangeDayMs[i]);
            rangeDayMs[i].Number = i + 1;
        }

    }


    private string SetHeight()
    {
        var height = (DeviceDisplay.Current.MainDisplayInfo.Height / DeviceDisplay.Current.MainDisplayInfo.Density) * 0.5;
        if (rangeDayMs.Count <= RowsPerPage)
        {
            RowsPerPage = rangeDayMs.Count;
            return "";
        }
        return height.ToString() + "px";
    }
    private bool showDetailsAll;
    private void ShowDetailsAll()
    {
        showDetailsAll = !showDetailsAll;
        for (int i = 0; i < rangeDayMs.Count; i++)
        {
            rangeDayMs[i].ShowDetails = showDetailsAll;
        }
    }

    public class RangeDayMWithNumber : RangeDayM
    {
        public RangeDayMWithNumber(RangeDayM rangeDayM)
        {
            Day = rangeDayM.Day;
            Driver = rangeDayM.Driver;
        }
        public int[] Table { get; set; }
        public int Number { get; set; }
        private bool showDetails;
        public bool ShowDetails
        {
            get => showDetails;
            set
            {
                showDetails = value;
                if (showDetails)
                {
                    Table = [1];
                }
                else
                {
                    Table = null;
                }
            }
        }
    }


}
